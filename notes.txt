NOTES:
-We're storing elements in a list each element is a 3 hour period, so if the user is out in the morning disregard late temperatures.
-Possibly break down each outfit by garment, so:
    -Hat: YES: Beanie
    -Jacket: NO
    -Jumper: YES: Black Weekday Hoodie
    -Shirt: ANY: (Covered by Jumper)
    -Bottoms: SHORTS: Black topman shorts
    -Socks: YES: Tube Socks
    -SHOES: YES: Tech sandals
Have to save the clothing dictionary some way!!!

TASKS:
BASE FEATURES:
-Check current weather or 7 day forecast
-Tell you what to wear out

ADVANCED FEATURES:
-Keep a list of clothes and add clothes to list 
-Make the selection more complex so that it will pick based upon style, event and clothing items in the list


HATS:
Is it a beanie or a cap?
What colour is it?
Is it formal?

JACKET:
Is it heavy or light?
What colour is it?
Is it formal?
Is it Waterproof?

TEES:
What colour is it?
Does it have a graphic?(maybe means that it is fromal)
Short or long sleeved

BOTTOMS:
Shorts or pants
if pants, are they cargos
if not then they should be considered for formal but, formal trousers can also be non formal also
Comfy?
colour
suitable for active occasion(walking)??????
Weather will rule out other things
If weather is warm, rule out black clothing.
fit-wide/slim *Not added yet...

SOCKS:
colour
*Socks are very dependant on the outfit and do not matter as much, so may only ask colour and then add more features as necessary.

SHOES:
shoe type-slim/chunky
formal-yes/no
comfy-yes/no


CHOOSING OUTFIT:
Create final outfit dictionary, loop through al
Is there food involved?-Is it a lot of food?-Pick only comfy pants.
*PROBLEM* Cannot randomly select a dictionary entry as they are not in an order, will have to access a specific key, but having trouble with that atm.

*Should also check which weather description appears most frequently so that we can only show that during the averages, instead of all the descriptions over the 24 hour period.

Possibly add a fumction that will allow the user to see all itmes of clothing already added.
If an item exists in the list it should not be allowed to be added again.
Need to implement a more complex outfit selector(take formality of situation into account, if items match, favourite outfits and so on).
Need to implement accessory selection.

When selecting an outfit the main dictionary is seperated into smaller dictionaries, we could 'pop' all irrelevent items when making a decision, so pop all 'Formal:NO' items.
May also be able to select all items that are formal through specifing dictionary entries?

Looping through nested dictionaries is to be avoided as it is very complex and requires a form of recursion. 
The way the issue was solved was to while loop through the random selection process until it selected a random entry that I wanted.

*Semi solved most frequent weather conditions but it doesnt print it in a nice manner.*FIX*

Formal outfit selection is simple, keep picking until formal is True.

Colour matching: If beanie is yellow, tee should not be certain colours etc... 

Should there be a function for individual selection? so a hat, tee etc... and depending on situatuion you call these functions. 

*REMOVED accessory function, replaced with ability to view all clothing in list.*

*NOTE* Next time your on, change functionality so that if a coat is formal, cargos cannot be selected.